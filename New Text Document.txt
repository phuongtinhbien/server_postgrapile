-- FUNCTION: public.updatestatuscustomerorder(numeric, character varying, numeric)

-- DROP FUNCTION public.updatestatuscustomerorder(numeric, character varying, numeric);

CREATE OR REPLACE FUNCTION public.updatestatuscustomerorder(
	co_id numeric,
	p_status character varying,
	p_user numeric)
    RETURNS customer_order
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$

declare
	o customer_order;
	receipt_id numeric;
	no_rec numeric;
	r receipt;
	co_status varchar;
	task_order task;
	wa numeric;
	next_co_id numeric;
begin
	select status into co_status from customer_order co where co.id = co_id;
	update customer_order co set status = p_status where co.id = co_id;
	update customer_order co set update_date = now() where co.id = co_id;
	update order_detail od set status = p_status where od.order_id = co_id;
	update order_detail od set update_date = now() where od.order_id = co_id;
	select co.*  into o from customer_order co where co.id = co_id;
	select * into task_order from task where task_type='TASK_CUSTOMER_ORDER' and customer_order = o.id;
	update task set PREVIOUS_TASK = 'Y' where task_type='TASK_CUSTOMER_ORDER' and customer_order = o.id;
	insert into task (current_staff, previous_staff, task_type, customer_order, receipt, previous_status, current_status,PREVIOUS_TASK, branch_id)
		values (p_user, task_order.current_staff, 'TASK_CUSTOMER_ORDER', o.id, null, co_status, o.status, 'N', o.branch_id);
	if o.status = 'APPROVED' then
		begin
			receipt_id = nextval ('receipt_seq');
			insert into receipt (id, order_id, status, create_by, update_by)
			values (receipt_id,o.id, 'PENDING', p_user,p_user) returning * into r;
			insert into task (current_staff, previous_staff, task_type, customer_order, receipt, previous_status, current_status,PREVIOUS_TASK, branch_id)
			values (p_user, null, 'TASK_RECEIPT', null,receipt_id , null, r.status,'N',o.branch_id );
			select count(1) into no_rec from order_detail where order_id  = o.id;
			if no_rec> 0 then
			begin
				insert into receipt_detail (
					id, receipt_id, service_type_id, unit_id, label_id,
					color_id, product_id, material_id, amount,create_by, update_by, status,unit_price)
				select nextval('receipt_detail_seq'),receipt_id, service_type_id, unit_id, label_id,
					color_id, product_id, material_id, amount,p_user, p_user, 'PENDING', unit_price
				from order_detail where order_id  = o.id;	
			end;
			end if;
		end;
	elsif o.status = 'FINISHED_SERVING' then
		begin
		select * into r from receipt where order_id = o.id;
		PERFORM updatestatusreceipt(r.id,'PENDING_DELIVERY', p_user);
		select distinct (w.washing_machine_id) into wa from wash w inner join wash_bag wb on w.wash_bag_id =  wb.id
		inner join receipt re on re.id = wb.receipt_id
		where re.id = r.id;
		update wash set status = 'SERVING' where washing_machine_id = wa
		and sn = (select min(sn) from wash where washing_machine_id = wa and status = 'PENDING_SERVING')
		and status = 'PENDING_SERVING';
		select co.id into next_co_id from customer_order co inner join receipt re on co.id = re.order_id
		inner join wash_bag wb on wb.receipt_id = re.id
		inner join wash w on w.wash_bag_id = wb.id
		where w.status='SERVING' and w.washing_machine_id = wa;
		PERFORM updatestatuscustomerorder(next_co_id,'SERVING', p_user );
		end;
	end if;
	if o.status = 'PENDING_SERVING' or o.status = 'SERVING' or o.status = 'FINISHED_SERVING' then
		PERFORM update_wash (o.id,o.status, p_user );
	end if;
  return o;
end;

$BODY$;

ALTER FUNCTION public.updatestatuscustomerorder(numeric, character varying, numeric)
    OWNER TO postgres;

GRANT EXECUTE ON FUNCTION public.updatestatuscustomerorder(numeric, character varying, numeric) TO postgres;

GRANT EXECUTE ON FUNCTION public.updatestatuscustomerorder(numeric, character varying, numeric) TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.updatestatuscustomerorder(numeric, character varying, numeric) TO auth_authenticated;

